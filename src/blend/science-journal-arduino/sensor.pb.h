/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6-dev at Thu Jun 16 11:04:14 2016. */

#ifndef PB_SENSOR_PB_H_INCLUDED
#define PB_SENSOR_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _goosci_DataType {
    goosci_DataType_ANALOG = 1,
    goosci_DataType_DIGITAL = 2,
    goosci_DataType_FLOAT = 3,
    goosci_DataType_INT = 4,
    goosci_DataType_STRING = 5
} goosci_DataType;
#define _goosci_DataType_MIN goosci_DataType_ANALOG
#define _goosci_DataType_MAX goosci_DataType_STRING
#define _goosci_DataType_ARRAYSIZE ((goosci_DataType)(goosci_DataType_STRING+1))

/* Struct definitions */
typedef struct _goosci_BleSensorConfig {
    pb_callback_t address;
/* @@protoc_insertion_point(struct:goosci_BleSensorConfig) */
} goosci_BleSensorConfig;

typedef struct _goosci_Empty {
    char dummy_field;
/* @@protoc_insertion_point(struct:goosci_Empty) */
} goosci_Empty;

typedef struct _goosci_Error {
    pb_callback_t error;
/* @@protoc_insertion_point(struct:goosci_Error) */
} goosci_Error;

typedef struct _goosci_StringValue {
    pb_callback_t value;
/* @@protoc_insertion_point(struct:goosci_StringValue) */
} goosci_StringValue;

typedef struct _goosci_AnalogPin {
    int32_t pin;
/* @@protoc_insertion_point(struct:goosci_AnalogPin) */
} goosci_AnalogPin;

typedef struct _goosci_AnalogValue {
    uint32_t value;
/* @@protoc_insertion_point(struct:goosci_AnalogValue) */
} goosci_AnalogValue;

typedef struct _goosci_DigitalPin {
    int32_t pin;
/* @@protoc_insertion_point(struct:goosci_DigitalPin) */
} goosci_DigitalPin;

typedef struct _goosci_DigitalValue {
    bool value;
/* @@protoc_insertion_point(struct:goosci_DigitalValue) */
} goosci_DigitalValue;

typedef struct _goosci_FloatValue {
    float value;
/* @@protoc_insertion_point(struct:goosci_FloatValue) */
} goosci_FloatValue;

typedef struct _goosci_IntValue {
    int32_t value;
/* @@protoc_insertion_point(struct:goosci_IntValue) */
} goosci_IntValue;

typedef struct _goosci_Interval {
    int32_t count;
    bool has_frequency;
    int32_t frequency;
/* @@protoc_insertion_point(struct:goosci_Interval) */
} goosci_Interval;

typedef struct _goosci_Version {
    int32_t version;
/* @@protoc_insertion_point(struct:goosci_Version) */
} goosci_Version;

typedef struct _goosci_VirtualPin {
    int32_t pin;
/* @@protoc_insertion_point(struct:goosci_VirtualPin) */
} goosci_VirtualPin;

typedef struct _goosci_Pin {
    pb_size_t which_pin;
    union {
        goosci_AnalogPin analog_pin;
        goosci_DigitalPin digital_pin;
        goosci_VirtualPin virtual_pin;
    } pin;
/* @@protoc_insertion_point(struct:goosci_Pin) */
} goosci_Pin;

typedef struct _goosci_SensorDataRequest {
    uint32_t timestamp_key;
    goosci_Interval interval;
    pb_callback_t pin;
/* @@protoc_insertion_point(struct:goosci_SensorDataRequest) */
} goosci_SensorDataRequest;

typedef struct _goosci_Data {
    goosci_Pin pin;
    pb_size_t which_value;
    union {
        goosci_AnalogValue analog_value;
        goosci_DigitalValue digital_value;
        goosci_FloatValue float_value;
        goosci_IntValue int_value;
        goosci_StringValue string_value;
    } value;
/* @@protoc_insertion_point(struct:goosci_Data) */
} goosci_Data;

typedef struct _goosci_SensorData {
    uint32_t timestamp_key;
    pb_size_t which_result;
    union {
        goosci_Error error;
        goosci_Data data;
    } result;
/* @@protoc_insertion_point(struct:goosci_SensorData) */
} goosci_SensorData;

/* Default values for struct fields */
extern const int32_t goosci_Version_version_default;

/* Initializer values for message structs */
#define goosci_Empty_init_default                {0}
#define goosci_Version_init_default              {1}
#define goosci_AnalogPin_init_default            {0}
#define goosci_DigitalPin_init_default           {0}
#define goosci_VirtualPin_init_default           {0}
#define goosci_Pin_init_default                  {0, {goosci_AnalogPin_init_default}}
#define goosci_Interval_init_default             {0, false, 0}
#define goosci_SensorDataRequest_init_default    {0, goosci_Interval_init_default, {{NULL}, NULL}}
#define goosci_BleSensorConfig_init_default      {{{NULL}, NULL}}
#define goosci_AnalogValue_init_default          {0}
#define goosci_DigitalValue_init_default         {0}
#define goosci_FloatValue_init_default           {0}
#define goosci_IntValue_init_default             {0}
#define goosci_StringValue_init_default          {{{NULL}, NULL}}
#define goosci_Data_init_default                 {goosci_Pin_init_default, 0, {goosci_AnalogValue_init_default}}
#define goosci_Error_init_default                {{{NULL}, NULL}}
#define goosci_SensorData_init_default           {0, 0, {goosci_Error_init_default}}
#define goosci_Empty_init_zero                   {0}
#define goosci_Version_init_zero                 {0}
#define goosci_AnalogPin_init_zero               {0}
#define goosci_DigitalPin_init_zero              {0}
#define goosci_VirtualPin_init_zero              {0}
#define goosci_Pin_init_zero                     {0, {goosci_AnalogPin_init_zero}}
#define goosci_Interval_init_zero                {0, false, 0}
#define goosci_SensorDataRequest_init_zero       {0, goosci_Interval_init_zero, {{NULL}, NULL}}
#define goosci_BleSensorConfig_init_zero         {{{NULL}, NULL}}
#define goosci_AnalogValue_init_zero             {0}
#define goosci_DigitalValue_init_zero            {0}
#define goosci_FloatValue_init_zero              {0}
#define goosci_IntValue_init_zero                {0}
#define goosci_StringValue_init_zero             {{{NULL}, NULL}}
#define goosci_Data_init_zero                    {goosci_Pin_init_zero, 0, {goosci_AnalogValue_init_zero}}
#define goosci_Error_init_zero                   {{{NULL}, NULL}}
#define goosci_SensorData_init_zero              {0, 0, {goosci_Error_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define goosci_BleSensorConfig_address_tag       1
#define goosci_Error_error_tag                   1
#define goosci_StringValue_value_tag             1
#define goosci_AnalogPin_pin_tag                 1
#define goosci_AnalogValue_value_tag             1
#define goosci_DigitalPin_pin_tag                1
#define goosci_DigitalValue_value_tag            1
#define goosci_FloatValue_value_tag              1
#define goosci_IntValue_value_tag                1
#define goosci_Interval_count_tag                1
#define goosci_Interval_frequency_tag            2
#define goosci_Version_version_tag               1
#define goosci_VirtualPin_pin_tag                1
#define goosci_Pin_analog_pin_tag                10
#define goosci_Pin_digital_pin_tag               11
#define goosci_Pin_virtual_pin_tag               12
#define goosci_SensorDataRequest_timestamp_key_tag 1
#define goosci_SensorDataRequest_interval_tag    2
#define goosci_SensorDataRequest_pin_tag         3
#define goosci_Data_analog_value_tag             10
#define goosci_Data_digital_value_tag            11
#define goosci_Data_float_value_tag              12
#define goosci_Data_int_value_tag                13
#define goosci_Data_string_value_tag             14
#define goosci_Data_pin_tag                      1
#define goosci_SensorData_error_tag              10
#define goosci_SensorData_data_tag               11
#define goosci_SensorData_timestamp_key_tag      1

/* Struct field encoding specification for nanopb */
extern const pb_field_t goosci_Empty_fields[1];
extern const pb_field_t goosci_Version_fields[2];
extern const pb_field_t goosci_AnalogPin_fields[2];
extern const pb_field_t goosci_DigitalPin_fields[2];
extern const pb_field_t goosci_VirtualPin_fields[2];
extern const pb_field_t goosci_Pin_fields[4];
extern const pb_field_t goosci_Interval_fields[3];
extern const pb_field_t goosci_SensorDataRequest_fields[4];
extern const pb_field_t goosci_BleSensorConfig_fields[2];
extern const pb_field_t goosci_AnalogValue_fields[2];
extern const pb_field_t goosci_DigitalValue_fields[2];
extern const pb_field_t goosci_FloatValue_fields[2];
extern const pb_field_t goosci_IntValue_fields[2];
extern const pb_field_t goosci_StringValue_fields[2];
extern const pb_field_t goosci_Data_fields[7];
extern const pb_field_t goosci_Error_fields[2];
extern const pb_field_t goosci_SensorData_fields[4];

/* Maximum encoded size of messages (where known) */
#define goosci_Empty_size                        0
#define goosci_Version_size                      11
#define goosci_AnalogPin_size                    11
#define goosci_DigitalPin_size                   11
#define goosci_VirtualPin_size                   11
#define goosci_Pin_size                          13
#define goosci_Interval_size                     22
/* goosci_SensorDataRequest_size depends on runtime parameters */
/* goosci_BleSensorConfig_size depends on runtime parameters */
#define goosci_AnalogValue_size                  6
#define goosci_DigitalValue_size                 2
#define goosci_FloatValue_size                   5
#define goosci_IntValue_size                     11
/* goosci_StringValue_size depends on runtime parameters */
/* goosci_Data_size depends on runtime parameters */
/* goosci_Error_size depends on runtime parameters */
/* goosci_SensorData_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SENSOR_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
